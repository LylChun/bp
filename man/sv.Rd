% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sv.R
\name{sv}
\alias{sv}
\title{Successive Variation (SV)}
\usage{
sv(data, inc_date = FALSE, bp_type = 0)
}
\arguments{
\item{data}{Required argument. Pre-processed dataframe with SBP and DBP columns
with optional ID, VISIT, WAKE, and DATE columns if available.
Use \code{process_data} to properly format data.}

\item{inc_date}{Optional argument. Default is FALSE. inc_date = TRUE will include
Date as a grouping level. For ABPM data this is typically omitted as sleep
is recorded over multiple days. This argument is useful for self-monitoring
as with the bp_jhs data}

\item{bp_type}{Optional argument. Determines whether to calculate ARV for SBP
values or DBP values. Default is 0 corresponding to output for both SBP & DBP.
For \strong{both} SBP and DBP ARV values use bp_type = 0, for \strong{SBP-only}
use bp_type = 1, and for \strong{DBP-only} use bp_type = 2}
}
\value{
EXPLANATION
}
\description{
Calculate the successive variation (SV) at various levels of granularity
based on what is supplied (ID, VISIT, WAKE, and / or DATE)for either SBP,
DBP, or both. SV is a measure of dispersion that takes into account the
temporal structure of the data and relies on the sum of squared differences
in successive observations, unlike the average real variability (ARV)
which relies on the sum of absolute differences.
$$SV = sqrt(sum(x_{i+1} - x_i)^2/n-1)$$
}
\details{
\strong{NOTE:} The canonical standard deviation, independent of the temporal
structure using the sample average, is added for comparison:
$$SD = sqrt(sum(x_{i+1} - xbar)^2/n-1)$$
}
\examples{
# Load data
data(hypnos_data)
data(bp_jhs)

# Process hypnos_data
data1 <- process_data(hypnos_data, sbp = "SYST", dbp = "DIAST", bp_datetime = "date.time",
id = "id", wake = "wake", visit = "visit", hr = "hr", pp ="pp", map = "map", rpp = "rpp")
# Process bp_jhs data
data2 <- process_data(bp_jhs, sbp = "Sys.mmHg.", dbp = "Dias.mmHg.", bp_datetime = "DateTime",
hr = "Pulse.bpm.")

# SV Calculation
sv(data1)
sv(data2)
}
